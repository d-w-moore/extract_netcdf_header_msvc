::::::::::::::
mymodule.py
::::::::::::::
# in core.py : from discovery.mymodule import thing

def thing(rule_args, callback, rei):
  x = rule_args[0] 
  rule_args[0] = str(int(x) * 2)

::::::::::::::
__init__.py
::::::::::::::

Version = 0.1

::::::::::::::
call_aard_thing.r
::::::::::::::

def main(rarg,cbk,rei):
  a = int( global_vars['*a'][1:-1] )
# x = 34
  x = int(cbk.thing(str(a))['arguments'][0])
  cbk.writeLine('stdout','output = {}'.format(x))

INPUT  *a=$'33'
OUTPUT ruleExecOut

::::::::::::::
exp1.r
::::::::::::::

main() {
  writeLine("stdout","*b" ++ "*a")
}
INPUT *b="d",*a="4"
OUTPUT ruleExecOut
::::::::::::::
exp2py.r
::::::::::::::
main
{
  writeLine('stdout', '[*a] [*b]')
}

INPUT  *a=$'',*b=$''
OUTPUT ruleExecOut
::::::::::::::
exp2.r
::::::::::::::
main
{
  writeLine('stdout', '[*a] [*b]')
}

INPUT  *a=$'',*b=$''
OUTPUT ruleExecOut
::::::::::::::
printcmdline.r
::::::::::::::
def main(rule_args,callback,rei):
      callback.writeLine('stdout','{!r}'.format(rule_args))
      #for y in enumerate(rule_args):
      # callback.writeLine("stdout", "\t{!r}".format(y))

INPUT  null
OUTPUT ruleExecOut
::::::::::::::
test_meta_irrl.r
::::::::::::::
main 
{
  *sg = ""
  msiString2KeyValPair("", *a)
  foreach (*m in select META_DATA_ATTR_NAME,META_DATA_ATTR_VALUE where DATA_NAME = 'aaa') {
    *newkv = *m.META_DATA_ATTR_NAME ++ "=" ++ *m.META_DATA_ATTR_VALUE
    writeLine(  "stdout", *newkv)
#   *sg = if (*sg != "") 
#      then "*sg%*newkv"
#      else "*newkv"
    msiAddKeyVal (*a, *m.META_DATA_ATTR_NAME, *m.META_DATA_ATTR_VALUE)
  }
}

INPUT  null
OUTPUT ruleExecOut
::::::::::::::
test_meta_py.r
::::::::::::::
from genquery import AS_LIST, AS_DICT, row_iterator
from pprint import pformat

def main(_arg,callback,rei):

    opn = global_vars['*Operation'][1:-1]
    collname = global_vars['*CollName'][1:-1]
    objname  = global_vars['*ObjName'][1:-1]
#   callback.writeLine("stdout",'********* {}.{}.{}'.format(opn,collname,objname ))

    targets = _list_data_objects( callback, collname, objname )

    callback.writeLine("stdout",'********* {targets!r}'.format(**locals()))

    if opn == 'Erase':
        
        for x in targets : _erase_meta(callback, x ) 

#=========================================================

def _list_data_objects( callback, coll_match, obj_match ):

  coll_condn =  "="
  obj_condn  =  "="

  if '%' in coll_match: coll_condn = 'like'
  if '%' in obj_match:  obj_condn  = 'like'

  return [ (coll,obj) for coll,obj in
               row_iterator( ["COLL_NAME","DATA_NAME"],
                             "COLL_NAME {coll_condn} '{coll_match}' " \
                             "and DATA_NAME {obj_condn} '{obj_match}'".format(**locals()),
                             AS_LIST, callback 
               ) ]

def _erase_meta( callback , split_path ):

  collpath = split_path [0]
  objname  = split_path [1]

  kvp = callback.msiString2KeyValPair("", irods_types.KeyValPair())['arguments'][1]

  for coll, data, key, value in row_iterator(
   ["COLL_NAME", "DATA_NAME", "META_DATA_ATTR_NAME", "META_DATA_ATTR_VALUE"], 
   "COLL_NAME = '{}' and  DATA_NAME = '{}'".format(collpath,objname), AS_LIST, callback
  ):
      kvp = callback.msiAddKeyVal ( kvp, key, value) ['arguments'] [0]

  for i in range(kvp.len):
   callback.writeLine("stdout", "{} -> {}".format(kvp.key[i], kvp.value[i]))

  callback.msiRemoveKeyValuePairsFromObj ( kvp  ,  "{}/{}".format(collpath,objname) , "-d" )

INPUT  *Operation='Erase', *CollName=$'/tempZone/home/rods', *ObjName=$'%.nc'
OUTPUT ruleExecOut

::::::::::::::
try__delayExec_py.r
::::::::::::::

rule_text_1 = """\
def test():
   open ("/tmp/flagger","w").write("hello from delayed python rule")
   #callback.writeLine("serverLog", "delay *** rule *** RUNNING")
test()
"""

def main(*x):

   x[1].delayExec(
    "<PLUSET>10s</PLUSET><INST_NAME>irods_rule_engine_plugin-python-instance</INST_NAME>",
    rule_text_1, "")

INPUT null
OUTPUT null

::::::::::::::
try__py_remote.r
::::::::::::::

def main(rule_args, callback, rei):

    rule_code = """\
def main(rule_args, callback, rei):
  callback.writeLine('serverLog','hello')
"""
    callback.py_remote('localhost', 
                       '<INST_NAME>irods_rule_engine_plugin-python-instance</INST_NAME>',
                       rule_code, '')

INPUT null
OUTPUT ruleExecOut
